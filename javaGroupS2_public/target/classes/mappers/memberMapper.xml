<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.javaGroupS2.dao.MemberDAO"> <!--이름 지정 마음대로 줘도 됨-->
	
	<!--아이디 존재여부 아이디(탈퇴제외) 체크- 카카오-->
	<select id="getMemberIdCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where userDel != 'OK' and mid = #{mid};
	</select>
	
	<!--회원가입시 아이디 중복 체크  -->
	<select id="getMemberIdDuplicateCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where remainMid = #{mid};
	</select>
	
	<!--회원가입시 닉네임 중복 체크  -->
	<select id="getMemberNickNameDuplicateCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where nickName = #{nickName};
	</select>
	
	<!--로그인용 아이디 체크 정보 가져오기 -->
	<select id="getMemberLoginIdCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where remainMid = #{mid};
	</select>
	
	<!--멤버 부분 아이디 찾기 -->
	<select id="getMemberPartId" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where userDel != 'OK' and tel = #{tel} and email = #{email};
	</select>
	
	<!--이메일로 전체 아이디 찾기 -->
	<select id="getMemberWholeMidByEmail" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where userDel != 'OK' and email = #{email};
	</select>
	
	<!--멤버 임시비밀번호을 위한 확인처리 -->
	<select id="getMemberCheckForPwdTempChange" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where userDel != 'OK' and mid = #{mid} and email = #{email} and tel = #{tel};
	</select>
	
	<!-- 회원 존재 확인 - mid pwd -->
	<select id="getMemberCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where userDel != 'OK' and mid = #{mid} and pwd = #{pwdChanged};
	</select>
	
	<!--카카오 로그인을 위한 닉네임 이메일 체크-->
	<select id="getMemberNickNameEmailCheck" resultType="com.spring.javaGroupS2.vo.MemberVO">
		select * from member where nickName=#{nickName} and email=#{email} limit 1;<!--혹시 닉네임 2개일때를 대비한 limit-->
	</select>
	
	<!--로그인용 정보 업데이트 방문횟수 최근방문시간  -->
	<update id="setMemberLoginInfoUpdate">
		update member set visitCnt = visitCnt+1, lastDate=now(), todayCnt=#{todayCnt} where mid = #{mid};
	</update>
	
	<!--회원정보 수정 -->
	<update id="setMemberInfoUpdateOk">
		update member set nickName=#{vo.nickName}, name=#{vo.name}, tel=#{vo.tel}, address=#{vo.address2}, email=#{vo.email}, content=#{vo.content}, photo=#{vo.photo}, userInfor=#{vo.userInfor} where mid = #{vo.mid};
	</update>
	
	<!--비밀번호 수정 -->
	<update id="setMemberPwdChange">
		update member set pwd=#{pwdChanged} where mid = #{mid};
	</update>
	
	<!--멤버테이블 회원 탈퇴 처리 -->
	<update id="setMemberWithdrawOk">
		update member set userDel='OK', lastDate=now(), point=0, userInfor='비공개', mid = CONCAT('deleteMember', idx) where remainMid = #{mid};
	</update>
	
	<!-- 임시비밀번호 입력처리 -->
	<update id="setMemberTempPwd">
		update member set pwd = #{tempPwd} where mid = #{mid};
	</update>
	
	<!-- 회원 가입 처리 -->
	<insert id="setMemberJoinOk">
		INSERT INTO member 
    VALUES (
        default, #{vo.mid}, #{vo.pwd}, #{vo.nickName}, #{vo.name}, #{vo.gender}, #{vo.birthday}, #{vo.tel}, #{vo.address2}, #{vo.email}, #{vo.content},
        #{vo.photo}, #{vo.userInfor}, default, default, default, default, default, now(), now(),default, #{vo.mid}
    );
	</insert>
	
	<!-- 탈퇴회원 테이블에 입력 -->
	<insert id="setDeleteMemberInputOk">
		INSERT INTO deletemember 
    VALUES (
       default, #{mid}, #{type}, #{reason}, default, #{comment}
    );
	</insert>
	
	<!--카카오 멤버 강제 가입  -->
	<insert id="setKakaoMemberInput">
		insert into member (mid, nickName, name,email, pwd, level, loginType ,remainMid) values(#{mid},#{nickName},#{nickName},#{email},#{pwd},1,'카카오' ,#{mid});
	</insert>
	
</mapper>